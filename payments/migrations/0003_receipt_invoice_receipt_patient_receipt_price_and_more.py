# Generated by Django 4.2.9 on 2025-07-01 09:38

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


def populate_patient(apps, schema_editor):
    """
    Populate the `patient` field in the `Receipt` model based on the associated `Payment`.
    """
    Receipt = apps.get_model('payments', 'Receipt')
    Payment = apps.get_model('payments', 'Payment')
    for receipt in Receipt.objects.all():
        if receipt.payment and receipt.payment.patient:
            receipt.patient = receipt.payment.patient
            receipt.save()


class Migration(migrations.Migration):

    dependencies = [
        ('branches', '0001_initial'),
        ('inventory', '0001_initial'),
        ('patient', '0002_patient_is_patient'),
        ('appointment', '0002_initial'),
        ('payments', '0002_invoice_created_by'),
    ]

    operations = [
        # Add the `invoice` field to the `Receipt` model
        migrations.AddField(
            model_name='receipt',
            name='invoice',
            field=models.ForeignKey(
                blank=True,
                help_text='The invoice associated with this receipt.',
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='payments.invoice'
            ),
        ),

        # Add the `patient` field to the `Receipt` model, allowing NULL temporarily
        migrations.AddField(
            model_name='receipt',
            name='patient',
            field=models.ForeignKey(
                null=True,  # Allow NULL temporarily
                blank=True,
                help_text='The patient associated with this receipt.',
                on_delete=django.db.models.deletion.CASCADE,
                to='patient.patient'
            ),
        ),

        # Add other fields to the `Receipt` model
        migrations.AddField(
            model_name='receipt',
            name='price',
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text='Price of the item or service at the time of receipt creation.',
                max_digits=10,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal('0.01'))]
            ),
        ),
        migrations.AddField(
            model_name='receipt',
            name='quantity',
            field=models.PositiveIntegerField(
                blank=True,
                default=1,
                help_text='Quantity of the service or item.',
                null=True
            ),
        ),
        migrations.AddField(
            model_name='receipt',
            name='service',
            field=models.ForeignKey(
                blank=True,
                help_text='The service associated with this receipt.',
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='appointment.service'
            ),
        ),
        migrations.AddField(
            model_name='receipt',
            name='total_amount',
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text='Total amount of the receipt.',
                max_digits=10,
                null=True
            ),
        ),

        # Modify existing fields in the `Receipt` model
        migrations.AlterField(
            model_name='receipt',
            name='branch',
            field=models.ForeignKey(
                blank=True,
                help_text='The branch where this receipt was issued.',
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='receipts',
                to='branches.branch'
            ),
        ),
        migrations.AlterField(
            model_name='receipt',
            name='issued_at',
            field=models.DateTimeField(
                auto_now_add=True,
                help_text='Timestamp when the receipt was issued.'
            ),
        ),
        migrations.AlterField(
            model_name='receipt',
            name='notes',
            field=models.TextField(
                blank=True,
                help_text='Additional notes for the receipt.',
                null=True
            ),
        ),
        migrations.AlterField(
            model_name='receipt',
            name='payment',
            field=models.OneToOneField(
                help_text='The payment associated with this receipt.',
                on_delete=django.db.models.deletion.CASCADE,
                to='payments.payment'
            ),
        ),
        migrations.AlterField(
            model_name='receipt',
            name='receipt_number',
            field=models.CharField(
                editable=False,
                help_text='Unique identifier for the receipt.',
                max_length=50,
                unique=True
            ),
        ),

        # Create the `ReceiptItem` model
        migrations.CreateModel(
            name='ReceiptItem',
            fields=[
                ('id', models.BigAutoField(
                    auto_created=True,
                    primary_key=True,
                    serialize=False,
                    verbose_name='ID'
                )),
                ('price', models.DecimalField(
                    decimal_places=2,
                    help_text='Price of the item at the time of receipt creation.',
                    max_digits=10,
                    validators=[django.core.validators.MinValueValidator(Decimal('0.01'))]
                )),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('item', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='inventory.inventoryitem'
                )),
                ('receipt', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='payments.receipt'
                )),
            ],
        ),

        # Populate the `patient` field for existing rows
        migrations.RunPython(populate_patient),

        # Enforce the `NOT NULL` constraint on the `patient` field
        migrations.AlterField(
            model_name='receipt',
            name='patient',
            field=models.ForeignKey(
                help_text='The patient associated with this receipt.',
                on_delete=django.db.models.deletion.CASCADE,
                to='patient.patient'
            ),
        ),
    ]